type Mutation {
  # sign up as new user
  signup(data: UserInputs!): User
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Token {
  # Token auth type
  auth: String

  # Token value
  token: String
}

# This is a User type
type User implements Node {
  # The ID of an object
  id: ID!

  # First name of user
  firstname: String

  # Last name of user
  lastname: String

  # Email address of user
  email: String

  # Hashed password of user
  password: String

  # Status of user account
  active: Boolean

  # List of user roles
  roles: [String]

  # List of user auth tokens
  tokens: [Token]
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

# Fields/args to add a new user
input UserInputs {
  # First name of user
  firstname: String

  # Last name of user
  lastname: String

  # Email address of user
  email: String

  # Hashed password of user
  password: String

  # Status of user account
  active: Boolean

  # List of user roles
  roles: [String]
}

type Viewer implements Node {
  # The ID of an object
  id: ID!

  # Find user by id
  user(_id: String!): User

  # a list of users
  users(after: String, first: Int, before: String, last: Int): UserConnection
}
